module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAttribute {
  count: Int!
}

type AggregateBlockList {
  count: Int!
}

type AggregateBrand {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateConversation {
  count: Int!
}

type AggregateConversationParticipant {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateOption {
  count: Int!
}

type AggregateOptionValue {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderableProduct {
  count: Int!
}

type AggregateOrderLineItem {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateSelectedOption {
  count: Int!
}

type AggregateShop {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVariant {
  count: Int!
}

type Attribute {
  id: ID!
  value: String!
  category: Category!
  shop: Shop!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type AttributeConnection {
  pageInfo: PageInfo!
  edges: [AttributeEdge]!
  aggregate: AggregateAttribute!
}

input AttributeCreateInput {
  id: ID
  value: String!
  category: CategoryCreateOneInput!
  shop: ShopCreateOneInput!
  products: ProductCreateManyWithoutAttributesInput
}

input AttributeCreateManyWithoutProductsInput {
  create: [AttributeCreateWithoutProductsInput!]
  connect: [AttributeWhereUniqueInput!]
}

input AttributeCreateWithoutProductsInput {
  id: ID
  value: String!
  category: CategoryCreateOneInput!
  shop: ShopCreateOneInput!
}

type AttributeEdge {
  node: Attribute!
  cursor: String!
}

enum AttributeOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
}

type AttributePreviousValues {
  id: ID!
  value: String!
}

input AttributeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [AttributeScalarWhereInput!]
  OR: [AttributeScalarWhereInput!]
  NOT: [AttributeScalarWhereInput!]
}

type AttributeSubscriptionPayload {
  mutation: MutationType!
  node: Attribute
  updatedFields: [String!]
  previousValues: AttributePreviousValues
}

input AttributeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AttributeWhereInput
  AND: [AttributeSubscriptionWhereInput!]
  OR: [AttributeSubscriptionWhereInput!]
  NOT: [AttributeSubscriptionWhereInput!]
}

input AttributeUpdateInput {
  value: String
  category: CategoryUpdateOneRequiredInput
  shop: ShopUpdateOneRequiredInput
  products: ProductUpdateManyWithoutAttributesInput
}

input AttributeUpdateManyDataInput {
  value: String
}

input AttributeUpdateManyMutationInput {
  value: String
}

input AttributeUpdateManyWithoutProductsInput {
  create: [AttributeCreateWithoutProductsInput!]
  delete: [AttributeWhereUniqueInput!]
  connect: [AttributeWhereUniqueInput!]
  set: [AttributeWhereUniqueInput!]
  disconnect: [AttributeWhereUniqueInput!]
  update: [AttributeUpdateWithWhereUniqueWithoutProductsInput!]
  upsert: [AttributeUpsertWithWhereUniqueWithoutProductsInput!]
  deleteMany: [AttributeScalarWhereInput!]
  updateMany: [AttributeUpdateManyWithWhereNestedInput!]
}

input AttributeUpdateManyWithWhereNestedInput {
  where: AttributeScalarWhereInput!
  data: AttributeUpdateManyDataInput!
}

input AttributeUpdateWithoutProductsDataInput {
  value: String
  category: CategoryUpdateOneRequiredInput
  shop: ShopUpdateOneRequiredInput
}

input AttributeUpdateWithWhereUniqueWithoutProductsInput {
  where: AttributeWhereUniqueInput!
  data: AttributeUpdateWithoutProductsDataInput!
}

input AttributeUpsertWithWhereUniqueWithoutProductsInput {
  where: AttributeWhereUniqueInput!
  update: AttributeUpdateWithoutProductsDataInput!
  create: AttributeCreateWithoutProductsInput!
}

input AttributeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  category: CategoryWhereInput
  shop: ShopWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  AND: [AttributeWhereInput!]
  OR: [AttributeWhereInput!]
  NOT: [AttributeWhereInput!]
}

input AttributeWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type BlockList {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  blockedUser: User!
}

type BlockListConnection {
  pageInfo: PageInfo!
  edges: [BlockListEdge]!
  aggregate: AggregateBlockList!
}

input BlockListCreateInput {
  id: ID
  user: UserCreateOneInput!
  blockedUser: UserCreateOneInput!
}

type BlockListEdge {
  node: BlockList!
  cursor: String!
}

enum BlockListOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BlockListPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BlockListSubscriptionPayload {
  mutation: MutationType!
  node: BlockList
  updatedFields: [String!]
  previousValues: BlockListPreviousValues
}

input BlockListSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BlockListWhereInput
  AND: [BlockListSubscriptionWhereInput!]
  OR: [BlockListSubscriptionWhereInput!]
  NOT: [BlockListSubscriptionWhereInput!]
}

input BlockListUpdateInput {
  user: UserUpdateOneRequiredInput
  blockedUser: UserUpdateOneRequiredInput
}

input BlockListWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  blockedUser: UserWhereInput
  AND: [BlockListWhereInput!]
  OR: [BlockListWhereInput!]
  NOT: [BlockListWhereInput!]
}

input BlockListWhereUniqueInput {
  id: ID
}

type Brand {
  id: ID!
  name: String!
  category: Category!
  shop: Shop!
}

type BrandConnection {
  pageInfo: PageInfo!
  edges: [BrandEdge]!
  aggregate: AggregateBrand!
}

input BrandCreateInput {
  id: ID
  name: String!
  category: CategoryCreateOneInput!
  shop: ShopCreateOneInput!
}

input BrandCreateOneInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
}

type BrandEdge {
  node: Brand!
  cursor: String!
}

enum BrandOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type BrandPreviousValues {
  id: ID!
  name: String!
}

type BrandSubscriptionPayload {
  mutation: MutationType!
  node: Brand
  updatedFields: [String!]
  previousValues: BrandPreviousValues
}

input BrandSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BrandWhereInput
  AND: [BrandSubscriptionWhereInput!]
  OR: [BrandSubscriptionWhereInput!]
  NOT: [BrandSubscriptionWhereInput!]
}

input BrandUpdateDataInput {
  name: String
  category: CategoryUpdateOneRequiredInput
  shop: ShopUpdateOneRequiredInput
}

input BrandUpdateInput {
  name: String
  category: CategoryUpdateOneRequiredInput
  shop: ShopUpdateOneRequiredInput
}

input BrandUpdateManyMutationInput {
  name: String
}

input BrandUpdateOneRequiredInput {
  create: BrandCreateInput
  update: BrandUpdateDataInput
  upsert: BrandUpsertNestedInput
  connect: BrandWhereUniqueInput
}

input BrandUpsertNestedInput {
  update: BrandUpdateDataInput!
  create: BrandCreateInput!
}

input BrandWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  category: CategoryWhereInput
  shop: ShopWhereInput
  AND: [BrandWhereInput!]
  OR: [BrandWhereInput!]
  NOT: [BrandWhereInput!]
}

input BrandWhereUniqueInput {
  id: ID
}

type Category {
  id: ID!
  name: String!
  options(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Option!]
  shop: Shop!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  name: String!
  options: OptionCreateManyWithoutCategoryInput
  shop: ShopCreateOneInput!
}

input CategoryCreateOneInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateOneWithoutOptionsInput {
  create: CategoryCreateWithoutOptionsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutOptionsInput {
  id: ID
  name: String!
  shop: ShopCreateOneInput!
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateDataInput {
  name: String
  options: OptionUpdateManyWithoutCategoryInput
  shop: ShopUpdateOneRequiredInput
}

input CategoryUpdateInput {
  name: String
  options: OptionUpdateManyWithoutCategoryInput
  shop: ShopUpdateOneRequiredInput
}

input CategoryUpdateManyMutationInput {
  name: String
}

input CategoryUpdateOneRequiredInput {
  create: CategoryCreateInput
  update: CategoryUpdateDataInput
  upsert: CategoryUpsertNestedInput
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateOneRequiredWithoutOptionsInput {
  create: CategoryCreateWithoutOptionsInput
  update: CategoryUpdateWithoutOptionsDataInput
  upsert: CategoryUpsertWithoutOptionsInput
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateWithoutOptionsDataInput {
  name: String
  shop: ShopUpdateOneRequiredInput
}

input CategoryUpsertNestedInput {
  update: CategoryUpdateDataInput!
  create: CategoryCreateInput!
}

input CategoryUpsertWithoutOptionsInput {
  update: CategoryUpdateWithoutOptionsDataInput!
  create: CategoryCreateWithoutOptionsInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  options_every: OptionWhereInput
  options_some: OptionWhereInput
  options_none: OptionWhereInput
  shop: ShopWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
}

type Conversation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  creator: User!
  participants(where: ConversationParticipantWhereInput, orderBy: ConversationParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConversationParticipant!]
  conversationType: ConversationType!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
}

type ConversationConnection {
  pageInfo: PageInfo!
  edges: [ConversationEdge]!
  aggregate: AggregateConversation!
}

input ConversationCreateInput {
  id: ID
  title: String
  creator: UserCreateOneInput!
  participants: ConversationParticipantCreateManyWithoutConversationInput
  conversationType: ConversationType!
  messages: MessageCreateManyWithoutConversationInput
}

input ConversationCreateOneWithoutMessagesInput {
  create: ConversationCreateWithoutMessagesInput
  connect: ConversationWhereUniqueInput
}

input ConversationCreateOneWithoutParticipantsInput {
  create: ConversationCreateWithoutParticipantsInput
  connect: ConversationWhereUniqueInput
}

input ConversationCreateWithoutMessagesInput {
  id: ID
  title: String
  creator: UserCreateOneInput!
  participants: ConversationParticipantCreateManyWithoutConversationInput
  conversationType: ConversationType!
}

input ConversationCreateWithoutParticipantsInput {
  id: ID
  title: String
  creator: UserCreateOneInput!
  conversationType: ConversationType!
  messages: MessageCreateManyWithoutConversationInput
}

type ConversationEdge {
  node: Conversation!
  cursor: String!
}

enum ConversationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  conversationType_ASC
  conversationType_DESC
}

type ConversationParticipant {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  conversation: Conversation!
  role: ConversationParticipantRole!
}

type ConversationParticipantConnection {
  pageInfo: PageInfo!
  edges: [ConversationParticipantEdge]!
  aggregate: AggregateConversationParticipant!
}

input ConversationParticipantCreateInput {
  id: ID
  user: UserCreateOneWithoutConversationsInput!
  conversation: ConversationCreateOneWithoutParticipantsInput!
  role: ConversationParticipantRole
}

input ConversationParticipantCreateManyWithoutConversationInput {
  create: [ConversationParticipantCreateWithoutConversationInput!]
  connect: [ConversationParticipantWhereUniqueInput!]
}

input ConversationParticipantCreateManyWithoutUserInput {
  create: [ConversationParticipantCreateWithoutUserInput!]
  connect: [ConversationParticipantWhereUniqueInput!]
}

input ConversationParticipantCreateWithoutConversationInput {
  id: ID
  user: UserCreateOneWithoutConversationsInput!
  role: ConversationParticipantRole
}

input ConversationParticipantCreateWithoutUserInput {
  id: ID
  conversation: ConversationCreateOneWithoutParticipantsInput!
  role: ConversationParticipantRole
}

type ConversationParticipantEdge {
  node: ConversationParticipant!
  cursor: String!
}

enum ConversationParticipantOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  role_ASC
  role_DESC
}

type ConversationParticipantPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: ConversationParticipantRole!
}

enum ConversationParticipantRole {
  MEMBER
  ADMIN
}

input ConversationParticipantScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  role: ConversationParticipantRole
  role_not: ConversationParticipantRole
  role_in: [ConversationParticipantRole!]
  role_not_in: [ConversationParticipantRole!]
  AND: [ConversationParticipantScalarWhereInput!]
  OR: [ConversationParticipantScalarWhereInput!]
  NOT: [ConversationParticipantScalarWhereInput!]
}

type ConversationParticipantSubscriptionPayload {
  mutation: MutationType!
  node: ConversationParticipant
  updatedFields: [String!]
  previousValues: ConversationParticipantPreviousValues
}

input ConversationParticipantSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConversationParticipantWhereInput
  AND: [ConversationParticipantSubscriptionWhereInput!]
  OR: [ConversationParticipantSubscriptionWhereInput!]
  NOT: [ConversationParticipantSubscriptionWhereInput!]
}

input ConversationParticipantUpdateInput {
  user: UserUpdateOneRequiredWithoutConversationsInput
  conversation: ConversationUpdateOneRequiredWithoutParticipantsInput
  role: ConversationParticipantRole
}

input ConversationParticipantUpdateManyDataInput {
  role: ConversationParticipantRole
}

input ConversationParticipantUpdateManyMutationInput {
  role: ConversationParticipantRole
}

input ConversationParticipantUpdateManyWithoutConversationInput {
  create: [ConversationParticipantCreateWithoutConversationInput!]
  delete: [ConversationParticipantWhereUniqueInput!]
  connect: [ConversationParticipantWhereUniqueInput!]
  set: [ConversationParticipantWhereUniqueInput!]
  disconnect: [ConversationParticipantWhereUniqueInput!]
  update: [ConversationParticipantUpdateWithWhereUniqueWithoutConversationInput!]
  upsert: [ConversationParticipantUpsertWithWhereUniqueWithoutConversationInput!]
  deleteMany: [ConversationParticipantScalarWhereInput!]
  updateMany: [ConversationParticipantUpdateManyWithWhereNestedInput!]
}

input ConversationParticipantUpdateManyWithoutUserInput {
  create: [ConversationParticipantCreateWithoutUserInput!]
  delete: [ConversationParticipantWhereUniqueInput!]
  connect: [ConversationParticipantWhereUniqueInput!]
  set: [ConversationParticipantWhereUniqueInput!]
  disconnect: [ConversationParticipantWhereUniqueInput!]
  update: [ConversationParticipantUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ConversationParticipantUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ConversationParticipantScalarWhereInput!]
  updateMany: [ConversationParticipantUpdateManyWithWhereNestedInput!]
}

input ConversationParticipantUpdateManyWithWhereNestedInput {
  where: ConversationParticipantScalarWhereInput!
  data: ConversationParticipantUpdateManyDataInput!
}

input ConversationParticipantUpdateWithoutConversationDataInput {
  user: UserUpdateOneRequiredWithoutConversationsInput
  role: ConversationParticipantRole
}

input ConversationParticipantUpdateWithoutUserDataInput {
  conversation: ConversationUpdateOneRequiredWithoutParticipantsInput
  role: ConversationParticipantRole
}

input ConversationParticipantUpdateWithWhereUniqueWithoutConversationInput {
  where: ConversationParticipantWhereUniqueInput!
  data: ConversationParticipantUpdateWithoutConversationDataInput!
}

input ConversationParticipantUpdateWithWhereUniqueWithoutUserInput {
  where: ConversationParticipantWhereUniqueInput!
  data: ConversationParticipantUpdateWithoutUserDataInput!
}

input ConversationParticipantUpsertWithWhereUniqueWithoutConversationInput {
  where: ConversationParticipantWhereUniqueInput!
  update: ConversationParticipantUpdateWithoutConversationDataInput!
  create: ConversationParticipantCreateWithoutConversationInput!
}

input ConversationParticipantUpsertWithWhereUniqueWithoutUserInput {
  where: ConversationParticipantWhereUniqueInput!
  update: ConversationParticipantUpdateWithoutUserDataInput!
  create: ConversationParticipantCreateWithoutUserInput!
}

input ConversationParticipantWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  conversation: ConversationWhereInput
  role: ConversationParticipantRole
  role_not: ConversationParticipantRole
  role_in: [ConversationParticipantRole!]
  role_not_in: [ConversationParticipantRole!]
  AND: [ConversationParticipantWhereInput!]
  OR: [ConversationParticipantWhereInput!]
  NOT: [ConversationParticipantWhereInput!]
}

input ConversationParticipantWhereUniqueInput {
  id: ID
}

type ConversationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  conversationType: ConversationType!
}

type ConversationSubscriptionPayload {
  mutation: MutationType!
  node: Conversation
  updatedFields: [String!]
  previousValues: ConversationPreviousValues
}

input ConversationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConversationWhereInput
  AND: [ConversationSubscriptionWhereInput!]
  OR: [ConversationSubscriptionWhereInput!]
  NOT: [ConversationSubscriptionWhereInput!]
}

enum ConversationType {
  SINGLE
  GROUP
}

input ConversationUpdateInput {
  title: String
  creator: UserUpdateOneRequiredInput
  participants: ConversationParticipantUpdateManyWithoutConversationInput
  conversationType: ConversationType
  messages: MessageUpdateManyWithoutConversationInput
}

input ConversationUpdateManyMutationInput {
  title: String
  conversationType: ConversationType
}

input ConversationUpdateOneRequiredWithoutMessagesInput {
  create: ConversationCreateWithoutMessagesInput
  update: ConversationUpdateWithoutMessagesDataInput
  upsert: ConversationUpsertWithoutMessagesInput
  connect: ConversationWhereUniqueInput
}

input ConversationUpdateOneRequiredWithoutParticipantsInput {
  create: ConversationCreateWithoutParticipantsInput
  update: ConversationUpdateWithoutParticipantsDataInput
  upsert: ConversationUpsertWithoutParticipantsInput
  connect: ConversationWhereUniqueInput
}

input ConversationUpdateWithoutMessagesDataInput {
  title: String
  creator: UserUpdateOneRequiredInput
  participants: ConversationParticipantUpdateManyWithoutConversationInput
  conversationType: ConversationType
}

input ConversationUpdateWithoutParticipantsDataInput {
  title: String
  creator: UserUpdateOneRequiredInput
  conversationType: ConversationType
  messages: MessageUpdateManyWithoutConversationInput
}

input ConversationUpsertWithoutMessagesInput {
  update: ConversationUpdateWithoutMessagesDataInput!
  create: ConversationCreateWithoutMessagesInput!
}

input ConversationUpsertWithoutParticipantsInput {
  update: ConversationUpdateWithoutParticipantsDataInput!
  create: ConversationCreateWithoutParticipantsInput!
}

input ConversationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  creator: UserWhereInput
  participants_every: ConversationParticipantWhereInput
  participants_some: ConversationParticipantWhereInput
  participants_none: ConversationParticipantWhereInput
  conversationType: ConversationType
  conversationType_not: ConversationType
  conversationType_in: [ConversationType!]
  conversationType_not_in: [ConversationType!]
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  AND: [ConversationWhereInput!]
  OR: [ConversationWhereInput!]
  NOT: [ConversationWhereInput!]
}

input ConversationWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Message {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  conversation: Conversation!
  sender: User!
  messageType: MessageType!
  message: String!
  attachmentThumbUrl: String
  attachmentUrl: String
  isDeleted: Boolean!
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  conversation: ConversationCreateOneWithoutMessagesInput!
  sender: UserCreateOneInput!
  messageType: MessageType
  message: String!
  attachmentThumbUrl: String
  attachmentUrl: String
  isDeleted: Boolean
}

input MessageCreateManyWithoutConversationInput {
  create: [MessageCreateWithoutConversationInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutConversationInput {
  id: ID
  sender: UserCreateOneInput!
  messageType: MessageType
  message: String!
  attachmentThumbUrl: String
  attachmentUrl: String
  isDeleted: Boolean
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  messageType_ASC
  messageType_DESC
  message_ASC
  message_DESC
  attachmentThumbUrl_ASC
  attachmentThumbUrl_DESC
  attachmentUrl_ASC
  attachmentUrl_DESC
  isDeleted_ASC
  isDeleted_DESC
}

type MessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  messageType: MessageType!
  message: String!
  attachmentThumbUrl: String
  attachmentUrl: String
  isDeleted: Boolean!
}

input MessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  messageType: MessageType
  messageType_not: MessageType
  messageType_in: [MessageType!]
  messageType_not_in: [MessageType!]
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  attachmentThumbUrl: String
  attachmentThumbUrl_not: String
  attachmentThumbUrl_in: [String!]
  attachmentThumbUrl_not_in: [String!]
  attachmentThumbUrl_lt: String
  attachmentThumbUrl_lte: String
  attachmentThumbUrl_gt: String
  attachmentThumbUrl_gte: String
  attachmentThumbUrl_contains: String
  attachmentThumbUrl_not_contains: String
  attachmentThumbUrl_starts_with: String
  attachmentThumbUrl_not_starts_with: String
  attachmentThumbUrl_ends_with: String
  attachmentThumbUrl_not_ends_with: String
  attachmentUrl: String
  attachmentUrl_not: String
  attachmentUrl_in: [String!]
  attachmentUrl_not_in: [String!]
  attachmentUrl_lt: String
  attachmentUrl_lte: String
  attachmentUrl_gt: String
  attachmentUrl_gte: String
  attachmentUrl_contains: String
  attachmentUrl_not_contains: String
  attachmentUrl_starts_with: String
  attachmentUrl_not_starts_with: String
  attachmentUrl_ends_with: String
  attachmentUrl_not_ends_with: String
  isDeleted: Boolean
  isDeleted_not: Boolean
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
}

input MessageUpdateInput {
  conversation: ConversationUpdateOneRequiredWithoutMessagesInput
  sender: UserUpdateOneRequiredInput
  messageType: MessageType
  message: String
  attachmentThumbUrl: String
  attachmentUrl: String
  isDeleted: Boolean
}

input MessageUpdateManyDataInput {
  messageType: MessageType
  message: String
  attachmentThumbUrl: String
  attachmentUrl: String
  isDeleted: Boolean
}

input MessageUpdateManyMutationInput {
  messageType: MessageType
  message: String
  attachmentThumbUrl: String
  attachmentUrl: String
  isDeleted: Boolean
}

input MessageUpdateManyWithoutConversationInput {
  create: [MessageCreateWithoutConversationInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutConversationInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutConversationInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyDataInput!
}

input MessageUpdateWithoutConversationDataInput {
  sender: UserUpdateOneRequiredInput
  messageType: MessageType
  message: String
  attachmentThumbUrl: String
  attachmentUrl: String
  isDeleted: Boolean
}

input MessageUpdateWithWhereUniqueWithoutConversationInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutConversationDataInput!
}

input MessageUpsertWithWhereUniqueWithoutConversationInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutConversationDataInput!
  create: MessageCreateWithoutConversationInput!
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  conversation: ConversationWhereInput
  sender: UserWhereInput
  messageType: MessageType
  messageType_not: MessageType
  messageType_in: [MessageType!]
  messageType_not_in: [MessageType!]
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  attachmentThumbUrl: String
  attachmentThumbUrl_not: String
  attachmentThumbUrl_in: [String!]
  attachmentThumbUrl_not_in: [String!]
  attachmentThumbUrl_lt: String
  attachmentThumbUrl_lte: String
  attachmentThumbUrl_gt: String
  attachmentThumbUrl_gte: String
  attachmentThumbUrl_contains: String
  attachmentThumbUrl_not_contains: String
  attachmentThumbUrl_starts_with: String
  attachmentThumbUrl_not_starts_with: String
  attachmentThumbUrl_ends_with: String
  attachmentThumbUrl_not_ends_with: String
  attachmentUrl: String
  attachmentUrl_not: String
  attachmentUrl_in: [String!]
  attachmentUrl_not_in: [String!]
  attachmentUrl_lt: String
  attachmentUrl_lte: String
  attachmentUrl_gt: String
  attachmentUrl_gte: String
  attachmentUrl_contains: String
  attachmentUrl_not_contains: String
  attachmentUrl_starts_with: String
  attachmentUrl_not_starts_with: String
  attachmentUrl_ends_with: String
  attachmentUrl_not_ends_with: String
  isDeleted: Boolean
  isDeleted_not: Boolean
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createAttribute(data: AttributeCreateInput!): Attribute!
  updateAttribute(data: AttributeUpdateInput!, where: AttributeWhereUniqueInput!): Attribute
  updateManyAttributes(data: AttributeUpdateManyMutationInput!, where: AttributeWhereInput): BatchPayload!
  upsertAttribute(where: AttributeWhereUniqueInput!, create: AttributeCreateInput!, update: AttributeUpdateInput!): Attribute!
  deleteAttribute(where: AttributeWhereUniqueInput!): Attribute
  deleteManyAttributes(where: AttributeWhereInput): BatchPayload!
  createBlockList(data: BlockListCreateInput!): BlockList!
  updateBlockList(data: BlockListUpdateInput!, where: BlockListWhereUniqueInput!): BlockList
  upsertBlockList(where: BlockListWhereUniqueInput!, create: BlockListCreateInput!, update: BlockListUpdateInput!): BlockList!
  deleteBlockList(where: BlockListWhereUniqueInput!): BlockList
  deleteManyBlockLists(where: BlockListWhereInput): BatchPayload!
  createBrand(data: BrandCreateInput!): Brand!
  updateBrand(data: BrandUpdateInput!, where: BrandWhereUniqueInput!): Brand
  updateManyBrands(data: BrandUpdateManyMutationInput!, where: BrandWhereInput): BatchPayload!
  upsertBrand(where: BrandWhereUniqueInput!, create: BrandCreateInput!, update: BrandUpdateInput!): Brand!
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteManyBrands(where: BrandWhereInput): BatchPayload!
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createConversation(data: ConversationCreateInput!): Conversation!
  updateConversation(data: ConversationUpdateInput!, where: ConversationWhereUniqueInput!): Conversation
  updateManyConversations(data: ConversationUpdateManyMutationInput!, where: ConversationWhereInput): BatchPayload!
  upsertConversation(where: ConversationWhereUniqueInput!, create: ConversationCreateInput!, update: ConversationUpdateInput!): Conversation!
  deleteConversation(where: ConversationWhereUniqueInput!): Conversation
  deleteManyConversations(where: ConversationWhereInput): BatchPayload!
  createConversationParticipant(data: ConversationParticipantCreateInput!): ConversationParticipant!
  updateConversationParticipant(data: ConversationParticipantUpdateInput!, where: ConversationParticipantWhereUniqueInput!): ConversationParticipant
  updateManyConversationParticipants(data: ConversationParticipantUpdateManyMutationInput!, where: ConversationParticipantWhereInput): BatchPayload!
  upsertConversationParticipant(where: ConversationParticipantWhereUniqueInput!, create: ConversationParticipantCreateInput!, update: ConversationParticipantUpdateInput!): ConversationParticipant!
  deleteConversationParticipant(where: ConversationParticipantWhereUniqueInput!): ConversationParticipant
  deleteManyConversationParticipants(where: ConversationParticipantWhereInput): BatchPayload!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createOption(data: OptionCreateInput!): Option!
  updateOption(data: OptionUpdateInput!, where: OptionWhereUniqueInput!): Option
  updateManyOptions(data: OptionUpdateManyMutationInput!, where: OptionWhereInput): BatchPayload!
  upsertOption(where: OptionWhereUniqueInput!, create: OptionCreateInput!, update: OptionUpdateInput!): Option!
  deleteOption(where: OptionWhereUniqueInput!): Option
  deleteManyOptions(where: OptionWhereInput): BatchPayload!
  createOptionValue(data: OptionValueCreateInput!): OptionValue!
  updateOptionValue(data: OptionValueUpdateInput!, where: OptionValueWhereUniqueInput!): OptionValue
  updateManyOptionValues(data: OptionValueUpdateManyMutationInput!, where: OptionValueWhereInput): BatchPayload!
  upsertOptionValue(where: OptionValueWhereUniqueInput!, create: OptionValueCreateInput!, update: OptionValueUpdateInput!): OptionValue!
  deleteOptionValue(where: OptionValueWhereUniqueInput!): OptionValue
  deleteManyOptionValues(where: OptionValueWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createOrderLineItem(data: OrderLineItemCreateInput!): OrderLineItem!
  updateOrderLineItem(data: OrderLineItemUpdateInput!, where: OrderLineItemWhereUniqueInput!): OrderLineItem
  updateManyOrderLineItems(data: OrderLineItemUpdateManyMutationInput!, where: OrderLineItemWhereInput): BatchPayload!
  upsertOrderLineItem(where: OrderLineItemWhereUniqueInput!, create: OrderLineItemCreateInput!, update: OrderLineItemUpdateInput!): OrderLineItem!
  deleteOrderLineItem(where: OrderLineItemWhereUniqueInput!): OrderLineItem
  deleteManyOrderLineItems(where: OrderLineItemWhereInput): BatchPayload!
  createOrderableProduct(data: OrderableProductCreateInput!): OrderableProduct!
  updateOrderableProduct(data: OrderableProductUpdateInput!, where: OrderableProductWhereUniqueInput!): OrderableProduct
  updateManyOrderableProducts(data: OrderableProductUpdateManyMutationInput!, where: OrderableProductWhereInput): BatchPayload!
  upsertOrderableProduct(where: OrderableProductWhereUniqueInput!, create: OrderableProductCreateInput!, update: OrderableProductUpdateInput!): OrderableProduct!
  deleteOrderableProduct(where: OrderableProductWhereUniqueInput!): OrderableProduct
  deleteManyOrderableProducts(where: OrderableProductWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createSelectedOption(data: SelectedOptionCreateInput!): SelectedOption!
  updateSelectedOption(data: SelectedOptionUpdateInput!, where: SelectedOptionWhereUniqueInput!): SelectedOption
  updateManySelectedOptions(data: SelectedOptionUpdateManyMutationInput!, where: SelectedOptionWhereInput): BatchPayload!
  upsertSelectedOption(where: SelectedOptionWhereUniqueInput!, create: SelectedOptionCreateInput!, update: SelectedOptionUpdateInput!): SelectedOption!
  deleteSelectedOption(where: SelectedOptionWhereUniqueInput!): SelectedOption
  deleteManySelectedOptions(where: SelectedOptionWhereInput): BatchPayload!
  createShop(data: ShopCreateInput!): Shop!
  updateShop(data: ShopUpdateInput!, where: ShopWhereUniqueInput!): Shop
  updateManyShops(data: ShopUpdateManyMutationInput!, where: ShopWhereInput): BatchPayload!
  upsertShop(where: ShopWhereUniqueInput!, create: ShopCreateInput!, update: ShopUpdateInput!): Shop!
  deleteShop(where: ShopWhereUniqueInput!): Shop
  deleteManyShops(where: ShopWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVariant(data: VariantCreateInput!): Variant!
  updateVariant(data: VariantUpdateInput!, where: VariantWhereUniqueInput!): Variant
  updateManyVariants(data: VariantUpdateManyMutationInput!, where: VariantWhereInput): BatchPayload!
  upsertVariant(where: VariantWhereUniqueInput!, create: VariantCreateInput!, update: VariantUpdateInput!): Variant!
  deleteVariant(where: VariantWhereUniqueInput!): Variant
  deleteManyVariants(where: VariantWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Option {
  id: ID!
  name: String!
  values(where: OptionValueWhereInput, orderBy: OptionValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OptionValue!]
  category: Category!
  shop: Shop!
}

type OptionConnection {
  pageInfo: PageInfo!
  edges: [OptionEdge]!
  aggregate: AggregateOption!
}

input OptionCreateInput {
  id: ID
  name: String!
  values: OptionValueCreateManyInput
  category: CategoryCreateOneWithoutOptionsInput!
  shop: ShopCreateOneInput!
}

input OptionCreateManyInput {
  create: [OptionCreateInput!]
  connect: [OptionWhereUniqueInput!]
}

input OptionCreateManyWithoutCategoryInput {
  create: [OptionCreateWithoutCategoryInput!]
  connect: [OptionWhereUniqueInput!]
}

input OptionCreateOneInput {
  create: OptionCreateInput
  connect: OptionWhereUniqueInput
}

input OptionCreateWithoutCategoryInput {
  id: ID
  name: String!
  values: OptionValueCreateManyInput
  shop: ShopCreateOneInput!
}

type OptionEdge {
  node: Option!
  cursor: String!
}

enum OptionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type OptionPreviousValues {
  id: ID!
  name: String!
}

input OptionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [OptionScalarWhereInput!]
  OR: [OptionScalarWhereInput!]
  NOT: [OptionScalarWhereInput!]
}

type OptionSubscriptionPayload {
  mutation: MutationType!
  node: Option
  updatedFields: [String!]
  previousValues: OptionPreviousValues
}

input OptionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OptionWhereInput
  AND: [OptionSubscriptionWhereInput!]
  OR: [OptionSubscriptionWhereInput!]
  NOT: [OptionSubscriptionWhereInput!]
}

input OptionUpdateDataInput {
  name: String
  values: OptionValueUpdateManyInput
  category: CategoryUpdateOneRequiredWithoutOptionsInput
  shop: ShopUpdateOneRequiredInput
}

input OptionUpdateInput {
  name: String
  values: OptionValueUpdateManyInput
  category: CategoryUpdateOneRequiredWithoutOptionsInput
  shop: ShopUpdateOneRequiredInput
}

input OptionUpdateManyDataInput {
  name: String
}

input OptionUpdateManyInput {
  create: [OptionCreateInput!]
  update: [OptionUpdateWithWhereUniqueNestedInput!]
  upsert: [OptionUpsertWithWhereUniqueNestedInput!]
  delete: [OptionWhereUniqueInput!]
  connect: [OptionWhereUniqueInput!]
  set: [OptionWhereUniqueInput!]
  disconnect: [OptionWhereUniqueInput!]
  deleteMany: [OptionScalarWhereInput!]
  updateMany: [OptionUpdateManyWithWhereNestedInput!]
}

input OptionUpdateManyMutationInput {
  name: String
}

input OptionUpdateManyWithoutCategoryInput {
  create: [OptionCreateWithoutCategoryInput!]
  delete: [OptionWhereUniqueInput!]
  connect: [OptionWhereUniqueInput!]
  set: [OptionWhereUniqueInput!]
  disconnect: [OptionWhereUniqueInput!]
  update: [OptionUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [OptionUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [OptionScalarWhereInput!]
  updateMany: [OptionUpdateManyWithWhereNestedInput!]
}

input OptionUpdateManyWithWhereNestedInput {
  where: OptionScalarWhereInput!
  data: OptionUpdateManyDataInput!
}

input OptionUpdateOneRequiredInput {
  create: OptionCreateInput
  update: OptionUpdateDataInput
  upsert: OptionUpsertNestedInput
  connect: OptionWhereUniqueInput
}

input OptionUpdateWithoutCategoryDataInput {
  name: String
  values: OptionValueUpdateManyInput
  shop: ShopUpdateOneRequiredInput
}

input OptionUpdateWithWhereUniqueNestedInput {
  where: OptionWhereUniqueInput!
  data: OptionUpdateDataInput!
}

input OptionUpdateWithWhereUniqueWithoutCategoryInput {
  where: OptionWhereUniqueInput!
  data: OptionUpdateWithoutCategoryDataInput!
}

input OptionUpsertNestedInput {
  update: OptionUpdateDataInput!
  create: OptionCreateInput!
}

input OptionUpsertWithWhereUniqueNestedInput {
  where: OptionWhereUniqueInput!
  update: OptionUpdateDataInput!
  create: OptionCreateInput!
}

input OptionUpsertWithWhereUniqueWithoutCategoryInput {
  where: OptionWhereUniqueInput!
  update: OptionUpdateWithoutCategoryDataInput!
  create: OptionCreateWithoutCategoryInput!
}

type OptionValue {
  id: ID!
  name: String!
}

type OptionValueConnection {
  pageInfo: PageInfo!
  edges: [OptionValueEdge]!
  aggregate: AggregateOptionValue!
}

input OptionValueCreateInput {
  id: ID
  name: String!
}

input OptionValueCreateManyInput {
  create: [OptionValueCreateInput!]
  connect: [OptionValueWhereUniqueInput!]
}

input OptionValueCreateOneInput {
  create: OptionValueCreateInput
  connect: OptionValueWhereUniqueInput
}

type OptionValueEdge {
  node: OptionValue!
  cursor: String!
}

enum OptionValueOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type OptionValuePreviousValues {
  id: ID!
  name: String!
}

input OptionValueScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [OptionValueScalarWhereInput!]
  OR: [OptionValueScalarWhereInput!]
  NOT: [OptionValueScalarWhereInput!]
}

type OptionValueSubscriptionPayload {
  mutation: MutationType!
  node: OptionValue
  updatedFields: [String!]
  previousValues: OptionValuePreviousValues
}

input OptionValueSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OptionValueWhereInput
  AND: [OptionValueSubscriptionWhereInput!]
  OR: [OptionValueSubscriptionWhereInput!]
  NOT: [OptionValueSubscriptionWhereInput!]
}

input OptionValueUpdateDataInput {
  name: String
}

input OptionValueUpdateInput {
  name: String
}

input OptionValueUpdateManyDataInput {
  name: String
}

input OptionValueUpdateManyInput {
  create: [OptionValueCreateInput!]
  update: [OptionValueUpdateWithWhereUniqueNestedInput!]
  upsert: [OptionValueUpsertWithWhereUniqueNestedInput!]
  delete: [OptionValueWhereUniqueInput!]
  connect: [OptionValueWhereUniqueInput!]
  set: [OptionValueWhereUniqueInput!]
  disconnect: [OptionValueWhereUniqueInput!]
  deleteMany: [OptionValueScalarWhereInput!]
  updateMany: [OptionValueUpdateManyWithWhereNestedInput!]
}

input OptionValueUpdateManyMutationInput {
  name: String
}

input OptionValueUpdateManyWithWhereNestedInput {
  where: OptionValueScalarWhereInput!
  data: OptionValueUpdateManyDataInput!
}

input OptionValueUpdateOneRequiredInput {
  create: OptionValueCreateInput
  update: OptionValueUpdateDataInput
  upsert: OptionValueUpsertNestedInput
  connect: OptionValueWhereUniqueInput
}

input OptionValueUpdateWithWhereUniqueNestedInput {
  where: OptionValueWhereUniqueInput!
  data: OptionValueUpdateDataInput!
}

input OptionValueUpsertNestedInput {
  update: OptionValueUpdateDataInput!
  create: OptionValueCreateInput!
}

input OptionValueUpsertWithWhereUniqueNestedInput {
  where: OptionValueWhereUniqueInput!
  update: OptionValueUpdateDataInput!
  create: OptionValueCreateInput!
}

input OptionValueWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [OptionValueWhereInput!]
  OR: [OptionValueWhereInput!]
  NOT: [OptionValueWhereInput!]
}

input OptionValueWhereUniqueInput {
  id: ID
}

input OptionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  values_every: OptionValueWhereInput
  values_some: OptionValueWhereInput
  values_none: OptionValueWhereInput
  category: CategoryWhereInput
  shop: ShopWhereInput
  AND: [OptionWhereInput!]
  OR: [OptionWhereInput!]
  NOT: [OptionWhereInput!]
}

input OptionWhereUniqueInput {
  id: ID
}

type Order {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: User!
  receiver: Shop!
  lineItems(where: OrderLineItemWhereInput, orderBy: OrderLineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderLineItem!]
  totalPrice: Float!
  totalRefunded: Float!
  totalTax: Float!
  orderStatus: OrderStatus!
}

type OrderableProduct {
  id: ID!
  product: Product!
  position: Int!
  shopBestSeller: Shop
  shopNewProduct: Shop
}

type OrderableProductConnection {
  pageInfo: PageInfo!
  edges: [OrderableProductEdge]!
  aggregate: AggregateOrderableProduct!
}

input OrderableProductCreateInput {
  id: ID
  product: ProductCreateOneWithoutOrderablesInput!
  position: Int!
  shopBestSeller: ShopCreateOneWithoutBestSellerProductsInput
  shopNewProduct: ShopCreateOneWithoutNewProductsInput
}

input OrderableProductCreateManyWithoutProductInput {
  create: [OrderableProductCreateWithoutProductInput!]
  connect: [OrderableProductWhereUniqueInput!]
}

input OrderableProductCreateManyWithoutShopBestSellerInput {
  create: [OrderableProductCreateWithoutShopBestSellerInput!]
  connect: [OrderableProductWhereUniqueInput!]
}

input OrderableProductCreateManyWithoutShopNewProductInput {
  create: [OrderableProductCreateWithoutShopNewProductInput!]
  connect: [OrderableProductWhereUniqueInput!]
}

input OrderableProductCreateWithoutProductInput {
  id: ID
  position: Int!
  shopBestSeller: ShopCreateOneWithoutBestSellerProductsInput
  shopNewProduct: ShopCreateOneWithoutNewProductsInput
}

input OrderableProductCreateWithoutShopBestSellerInput {
  id: ID
  product: ProductCreateOneWithoutOrderablesInput!
  position: Int!
  shopNewProduct: ShopCreateOneWithoutNewProductsInput
}

input OrderableProductCreateWithoutShopNewProductInput {
  id: ID
  product: ProductCreateOneWithoutOrderablesInput!
  position: Int!
  shopBestSeller: ShopCreateOneWithoutBestSellerProductsInput
}

type OrderableProductEdge {
  node: OrderableProduct!
  cursor: String!
}

enum OrderableProductOrderByInput {
  id_ASC
  id_DESC
  position_ASC
  position_DESC
}

type OrderableProductPreviousValues {
  id: ID!
  position: Int!
}

input OrderableProductScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  position: Int
  position_not: Int
  position_in: [Int!]
  position_not_in: [Int!]
  position_lt: Int
  position_lte: Int
  position_gt: Int
  position_gte: Int
  AND: [OrderableProductScalarWhereInput!]
  OR: [OrderableProductScalarWhereInput!]
  NOT: [OrderableProductScalarWhereInput!]
}

type OrderableProductSubscriptionPayload {
  mutation: MutationType!
  node: OrderableProduct
  updatedFields: [String!]
  previousValues: OrderableProductPreviousValues
}

input OrderableProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderableProductWhereInput
  AND: [OrderableProductSubscriptionWhereInput!]
  OR: [OrderableProductSubscriptionWhereInput!]
  NOT: [OrderableProductSubscriptionWhereInput!]
}

input OrderableProductUpdateInput {
  product: ProductUpdateOneRequiredWithoutOrderablesInput
  position: Int
  shopBestSeller: ShopUpdateOneWithoutBestSellerProductsInput
  shopNewProduct: ShopUpdateOneWithoutNewProductsInput
}

input OrderableProductUpdateManyDataInput {
  position: Int
}

input OrderableProductUpdateManyMutationInput {
  position: Int
}

input OrderableProductUpdateManyWithoutProductInput {
  create: [OrderableProductCreateWithoutProductInput!]
  delete: [OrderableProductWhereUniqueInput!]
  connect: [OrderableProductWhereUniqueInput!]
  set: [OrderableProductWhereUniqueInput!]
  disconnect: [OrderableProductWhereUniqueInput!]
  update: [OrderableProductUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [OrderableProductUpsertWithWhereUniqueWithoutProductInput!]
  deleteMany: [OrderableProductScalarWhereInput!]
  updateMany: [OrderableProductUpdateManyWithWhereNestedInput!]
}

input OrderableProductUpdateManyWithoutShopBestSellerInput {
  create: [OrderableProductCreateWithoutShopBestSellerInput!]
  delete: [OrderableProductWhereUniqueInput!]
  connect: [OrderableProductWhereUniqueInput!]
  set: [OrderableProductWhereUniqueInput!]
  disconnect: [OrderableProductWhereUniqueInput!]
  update: [OrderableProductUpdateWithWhereUniqueWithoutShopBestSellerInput!]
  upsert: [OrderableProductUpsertWithWhereUniqueWithoutShopBestSellerInput!]
  deleteMany: [OrderableProductScalarWhereInput!]
  updateMany: [OrderableProductUpdateManyWithWhereNestedInput!]
}

input OrderableProductUpdateManyWithoutShopNewProductInput {
  create: [OrderableProductCreateWithoutShopNewProductInput!]
  delete: [OrderableProductWhereUniqueInput!]
  connect: [OrderableProductWhereUniqueInput!]
  set: [OrderableProductWhereUniqueInput!]
  disconnect: [OrderableProductWhereUniqueInput!]
  update: [OrderableProductUpdateWithWhereUniqueWithoutShopNewProductInput!]
  upsert: [OrderableProductUpsertWithWhereUniqueWithoutShopNewProductInput!]
  deleteMany: [OrderableProductScalarWhereInput!]
  updateMany: [OrderableProductUpdateManyWithWhereNestedInput!]
}

input OrderableProductUpdateManyWithWhereNestedInput {
  where: OrderableProductScalarWhereInput!
  data: OrderableProductUpdateManyDataInput!
}

input OrderableProductUpdateWithoutProductDataInput {
  position: Int
  shopBestSeller: ShopUpdateOneWithoutBestSellerProductsInput
  shopNewProduct: ShopUpdateOneWithoutNewProductsInput
}

input OrderableProductUpdateWithoutShopBestSellerDataInput {
  product: ProductUpdateOneRequiredWithoutOrderablesInput
  position: Int
  shopNewProduct: ShopUpdateOneWithoutNewProductsInput
}

input OrderableProductUpdateWithoutShopNewProductDataInput {
  product: ProductUpdateOneRequiredWithoutOrderablesInput
  position: Int
  shopBestSeller: ShopUpdateOneWithoutBestSellerProductsInput
}

input OrderableProductUpdateWithWhereUniqueWithoutProductInput {
  where: OrderableProductWhereUniqueInput!
  data: OrderableProductUpdateWithoutProductDataInput!
}

input OrderableProductUpdateWithWhereUniqueWithoutShopBestSellerInput {
  where: OrderableProductWhereUniqueInput!
  data: OrderableProductUpdateWithoutShopBestSellerDataInput!
}

input OrderableProductUpdateWithWhereUniqueWithoutShopNewProductInput {
  where: OrderableProductWhereUniqueInput!
  data: OrderableProductUpdateWithoutShopNewProductDataInput!
}

input OrderableProductUpsertWithWhereUniqueWithoutProductInput {
  where: OrderableProductWhereUniqueInput!
  update: OrderableProductUpdateWithoutProductDataInput!
  create: OrderableProductCreateWithoutProductInput!
}

input OrderableProductUpsertWithWhereUniqueWithoutShopBestSellerInput {
  where: OrderableProductWhereUniqueInput!
  update: OrderableProductUpdateWithoutShopBestSellerDataInput!
  create: OrderableProductCreateWithoutShopBestSellerInput!
}

input OrderableProductUpsertWithWhereUniqueWithoutShopNewProductInput {
  where: OrderableProductWhereUniqueInput!
  update: OrderableProductUpdateWithoutShopNewProductDataInput!
  create: OrderableProductCreateWithoutShopNewProductInput!
}

input OrderableProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  product: ProductWhereInput
  position: Int
  position_not: Int
  position_in: [Int!]
  position_not_in: [Int!]
  position_lt: Int
  position_lte: Int
  position_gt: Int
  position_gte: Int
  shopBestSeller: ShopWhereInput
  shopNewProduct: ShopWhereInput
  AND: [OrderableProductWhereInput!]
  OR: [OrderableProductWhereInput!]
  NOT: [OrderableProductWhereInput!]
}

input OrderableProductWhereUniqueInput {
  id: ID
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: ID
  owner: UserCreateOneWithoutOrdersInput!
  receiver: ShopCreateOneInput!
  lineItems: OrderLineItemCreateManyInput
  totalPrice: Float!
  totalRefunded: Float!
  totalTax: Float!
  orderStatus: OrderStatus!
}

input OrderCreateManyWithoutOwnerInput {
  create: [OrderCreateWithoutOwnerInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateWithoutOwnerInput {
  id: ID
  receiver: ShopCreateOneInput!
  lineItems: OrderLineItemCreateManyInput
  totalPrice: Float!
  totalRefunded: Float!
  totalTax: Float!
  orderStatus: OrderStatus!
}

type OrderEdge {
  node: Order!
  cursor: String!
}

type OrderLineItem {
  id: ID!
  deletedAt: DateTime
  quantity: Int!
  variant: Variant
  owner: User
  shop: Shop!
}

type OrderLineItemConnection {
  pageInfo: PageInfo!
  edges: [OrderLineItemEdge]!
  aggregate: AggregateOrderLineItem!
}

input OrderLineItemCreateInput {
  id: ID
  deletedAt: DateTime
  quantity: Int!
  variant: VariantCreateOneInput
  owner: UserCreateOneWithoutCartInput
  shop: ShopCreateOneInput!
}

input OrderLineItemCreateManyInput {
  create: [OrderLineItemCreateInput!]
  connect: [OrderLineItemWhereUniqueInput!]
}

input OrderLineItemCreateManyWithoutOwnerInput {
  create: [OrderLineItemCreateWithoutOwnerInput!]
  connect: [OrderLineItemWhereUniqueInput!]
}

input OrderLineItemCreateWithoutOwnerInput {
  id: ID
  deletedAt: DateTime
  quantity: Int!
  variant: VariantCreateOneInput
  shop: ShopCreateOneInput!
}

type OrderLineItemEdge {
  node: OrderLineItem!
  cursor: String!
}

enum OrderLineItemOrderByInput {
  id_ASC
  id_DESC
  deletedAt_ASC
  deletedAt_DESC
  quantity_ASC
  quantity_DESC
}

type OrderLineItemPreviousValues {
  id: ID!
  deletedAt: DateTime
  quantity: Int!
}

input OrderLineItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  AND: [OrderLineItemScalarWhereInput!]
  OR: [OrderLineItemScalarWhereInput!]
  NOT: [OrderLineItemScalarWhereInput!]
}

type OrderLineItemSubscriptionPayload {
  mutation: MutationType!
  node: OrderLineItem
  updatedFields: [String!]
  previousValues: OrderLineItemPreviousValues
}

input OrderLineItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderLineItemWhereInput
  AND: [OrderLineItemSubscriptionWhereInput!]
  OR: [OrderLineItemSubscriptionWhereInput!]
  NOT: [OrderLineItemSubscriptionWhereInput!]
}

input OrderLineItemUpdateDataInput {
  deletedAt: DateTime
  quantity: Int
  variant: VariantUpdateOneInput
  owner: UserUpdateOneWithoutCartInput
  shop: ShopUpdateOneRequiredInput
}

input OrderLineItemUpdateInput {
  deletedAt: DateTime
  quantity: Int
  variant: VariantUpdateOneInput
  owner: UserUpdateOneWithoutCartInput
  shop: ShopUpdateOneRequiredInput
}

input OrderLineItemUpdateManyDataInput {
  deletedAt: DateTime
  quantity: Int
}

input OrderLineItemUpdateManyInput {
  create: [OrderLineItemCreateInput!]
  update: [OrderLineItemUpdateWithWhereUniqueNestedInput!]
  upsert: [OrderLineItemUpsertWithWhereUniqueNestedInput!]
  delete: [OrderLineItemWhereUniqueInput!]
  connect: [OrderLineItemWhereUniqueInput!]
  set: [OrderLineItemWhereUniqueInput!]
  disconnect: [OrderLineItemWhereUniqueInput!]
  deleteMany: [OrderLineItemScalarWhereInput!]
  updateMany: [OrderLineItemUpdateManyWithWhereNestedInput!]
}

input OrderLineItemUpdateManyMutationInput {
  deletedAt: DateTime
  quantity: Int
}

input OrderLineItemUpdateManyWithoutOwnerInput {
  create: [OrderLineItemCreateWithoutOwnerInput!]
  delete: [OrderLineItemWhereUniqueInput!]
  connect: [OrderLineItemWhereUniqueInput!]
  set: [OrderLineItemWhereUniqueInput!]
  disconnect: [OrderLineItemWhereUniqueInput!]
  update: [OrderLineItemUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [OrderLineItemUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [OrderLineItemScalarWhereInput!]
  updateMany: [OrderLineItemUpdateManyWithWhereNestedInput!]
}

input OrderLineItemUpdateManyWithWhereNestedInput {
  where: OrderLineItemScalarWhereInput!
  data: OrderLineItemUpdateManyDataInput!
}

input OrderLineItemUpdateWithoutOwnerDataInput {
  deletedAt: DateTime
  quantity: Int
  variant: VariantUpdateOneInput
  shop: ShopUpdateOneRequiredInput
}

input OrderLineItemUpdateWithWhereUniqueNestedInput {
  where: OrderLineItemWhereUniqueInput!
  data: OrderLineItemUpdateDataInput!
}

input OrderLineItemUpdateWithWhereUniqueWithoutOwnerInput {
  where: OrderLineItemWhereUniqueInput!
  data: OrderLineItemUpdateWithoutOwnerDataInput!
}

input OrderLineItemUpsertWithWhereUniqueNestedInput {
  where: OrderLineItemWhereUniqueInput!
  update: OrderLineItemUpdateDataInput!
  create: OrderLineItemCreateInput!
}

input OrderLineItemUpsertWithWhereUniqueWithoutOwnerInput {
  where: OrderLineItemWhereUniqueInput!
  update: OrderLineItemUpdateWithoutOwnerDataInput!
  create: OrderLineItemCreateWithoutOwnerInput!
}

input OrderLineItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  quantity: Int
  quantity_not: Int
  quantity_in: [Int!]
  quantity_not_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_gt: Int
  quantity_gte: Int
  variant: VariantWhereInput
  owner: UserWhereInput
  shop: ShopWhereInput
  AND: [OrderLineItemWhereInput!]
  OR: [OrderLineItemWhereInput!]
  NOT: [OrderLineItemWhereInput!]
}

input OrderLineItemWhereUniqueInput {
  id: ID
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  totalPrice_ASC
  totalPrice_DESC
  totalRefunded_ASC
  totalRefunded_DESC
  totalTax_ASC
  totalTax_DESC
  orderStatus_ASC
  orderStatus_DESC
}

type OrderPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  totalPrice: Float!
  totalRefunded: Float!
  totalTax: Float!
  orderStatus: OrderStatus!
}

input OrderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  totalPrice: Float
  totalPrice_not: Float
  totalPrice_in: [Float!]
  totalPrice_not_in: [Float!]
  totalPrice_lt: Float
  totalPrice_lte: Float
  totalPrice_gt: Float
  totalPrice_gte: Float
  totalRefunded: Float
  totalRefunded_not: Float
  totalRefunded_in: [Float!]
  totalRefunded_not_in: [Float!]
  totalRefunded_lt: Float
  totalRefunded_lte: Float
  totalRefunded_gt: Float
  totalRefunded_gte: Float
  totalTax: Float
  totalTax_not: Float
  totalTax_in: [Float!]
  totalTax_not_in: [Float!]
  totalTax_lt: Float
  totalTax_lte: Float
  totalTax_gt: Float
  totalTax_gte: Float
  orderStatus: OrderStatus
  orderStatus_not: OrderStatus
  orderStatus_in: [OrderStatus!]
  orderStatus_not_in: [OrderStatus!]
  AND: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
}

enum OrderStatus {
  SUBMITTED
  PAID
  PREPARED
  FAILED
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  owner: UserUpdateOneRequiredWithoutOrdersInput
  receiver: ShopUpdateOneRequiredInput
  lineItems: OrderLineItemUpdateManyInput
  totalPrice: Float
  totalRefunded: Float
  totalTax: Float
  orderStatus: OrderStatus
}

input OrderUpdateManyDataInput {
  totalPrice: Float
  totalRefunded: Float
  totalTax: Float
  orderStatus: OrderStatus
}

input OrderUpdateManyMutationInput {
  totalPrice: Float
  totalRefunded: Float
  totalTax: Float
  orderStatus: OrderStatus
}

input OrderUpdateManyWithoutOwnerInput {
  create: [OrderCreateWithoutOwnerInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [OrderScalarWhereInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput!
  data: OrderUpdateManyDataInput!
}

input OrderUpdateWithoutOwnerDataInput {
  receiver: ShopUpdateOneRequiredInput
  lineItems: OrderLineItemUpdateManyInput
  totalPrice: Float
  totalRefunded: Float
  totalTax: Float
  orderStatus: OrderStatus
}

input OrderUpdateWithWhereUniqueWithoutOwnerInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutOwnerDataInput!
}

input OrderUpsertWithWhereUniqueWithoutOwnerInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutOwnerDataInput!
  create: OrderCreateWithoutOwnerInput!
}

input OrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  owner: UserWhereInput
  receiver: ShopWhereInput
  lineItems_every: OrderLineItemWhereInput
  lineItems_some: OrderLineItemWhereInput
  lineItems_none: OrderLineItemWhereInput
  totalPrice: Float
  totalPrice_not: Float
  totalPrice_in: [Float!]
  totalPrice_not_in: [Float!]
  totalPrice_lt: Float
  totalPrice_lte: Float
  totalPrice_gt: Float
  totalPrice_gte: Float
  totalRefunded: Float
  totalRefunded_not: Float
  totalRefunded_in: [Float!]
  totalRefunded_not_in: [Float!]
  totalRefunded_lt: Float
  totalRefunded_lte: Float
  totalRefunded_gt: Float
  totalRefunded_gte: Float
  totalTax: Float
  totalTax_not: Float
  totalTax_in: [Float!]
  totalTax_not_in: [Float!]
  totalTax_lt: Float
  totalTax_lte: Float
  totalTax_gt: Float
  totalTax_gte: Float
  orderStatus: OrderStatus
  orderStatus_not: OrderStatus
  orderStatus_in: [OrderStatus!]
  orderStatus_not_in: [OrderStatus!]
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  shop: Shop!
  name: String!
  description: String
  brand: Brand!
  SKU: String
  category: Category!
  options(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Option!]
  unavailableOptionsValues(where: OptionValueWhereInput, orderBy: OptionValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OptionValue!]
  variants(where: VariantWhereInput, orderBy: VariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Variant!]
  attributes(where: AttributeWhereInput, orderBy: AttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attribute!]
  displayPrice: Float!
  available: Boolean!
  imageUrl: String
  orderables(where: OrderableProductWhereInput, orderBy: OrderableProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderableProduct!]
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  deletedAt: DateTime
  shop: ShopCreateOneWithoutProductsInput!
  name: String!
  description: String
  brand: BrandCreateOneInput!
  SKU: String
  category: CategoryCreateOneInput!
  options: OptionCreateManyInput
  unavailableOptionsValues: OptionValueCreateManyInput
  variants: VariantCreateManyWithoutProductInput
  attributes: AttributeCreateManyWithoutProductsInput
  displayPrice: Float!
  available: Boolean!
  imageUrl: String
  orderables: OrderableProductCreateManyWithoutProductInput
}

input ProductCreateManyWithoutAttributesInput {
  create: [ProductCreateWithoutAttributesInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutShopInput {
  create: [ProductCreateWithoutShopInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneWithoutOrderablesInput {
  create: ProductCreateWithoutOrderablesInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutVariantsInput {
  create: ProductCreateWithoutVariantsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutAttributesInput {
  id: ID
  deletedAt: DateTime
  shop: ShopCreateOneWithoutProductsInput!
  name: String!
  description: String
  brand: BrandCreateOneInput!
  SKU: String
  category: CategoryCreateOneInput!
  options: OptionCreateManyInput
  unavailableOptionsValues: OptionValueCreateManyInput
  variants: VariantCreateManyWithoutProductInput
  displayPrice: Float!
  available: Boolean!
  imageUrl: String
  orderables: OrderableProductCreateManyWithoutProductInput
}

input ProductCreateWithoutOrderablesInput {
  id: ID
  deletedAt: DateTime
  shop: ShopCreateOneWithoutProductsInput!
  name: String!
  description: String
  brand: BrandCreateOneInput!
  SKU: String
  category: CategoryCreateOneInput!
  options: OptionCreateManyInput
  unavailableOptionsValues: OptionValueCreateManyInput
  variants: VariantCreateManyWithoutProductInput
  attributes: AttributeCreateManyWithoutProductsInput
  displayPrice: Float!
  available: Boolean!
  imageUrl: String
}

input ProductCreateWithoutShopInput {
  id: ID
  deletedAt: DateTime
  name: String!
  description: String
  brand: BrandCreateOneInput!
  SKU: String
  category: CategoryCreateOneInput!
  options: OptionCreateManyInput
  unavailableOptionsValues: OptionValueCreateManyInput
  variants: VariantCreateManyWithoutProductInput
  attributes: AttributeCreateManyWithoutProductsInput
  displayPrice: Float!
  available: Boolean!
  imageUrl: String
  orderables: OrderableProductCreateManyWithoutProductInput
}

input ProductCreateWithoutVariantsInput {
  id: ID
  deletedAt: DateTime
  shop: ShopCreateOneWithoutProductsInput!
  name: String!
  description: String
  brand: BrandCreateOneInput!
  SKU: String
  category: CategoryCreateOneInput!
  options: OptionCreateManyInput
  unavailableOptionsValues: OptionValueCreateManyInput
  attributes: AttributeCreateManyWithoutProductsInput
  displayPrice: Float!
  available: Boolean!
  imageUrl: String
  orderables: OrderableProductCreateManyWithoutProductInput
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  SKU_ASC
  SKU_DESC
  displayPrice_ASC
  displayPrice_DESC
  available_ASC
  available_DESC
  imageUrl_ASC
  imageUrl_DESC
}

type ProductPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  name: String!
  description: String
  SKU: String
  displayPrice: Float!
  available: Boolean!
  imageUrl: String
}

input ProductScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  SKU: String
  SKU_not: String
  SKU_in: [String!]
  SKU_not_in: [String!]
  SKU_lt: String
  SKU_lte: String
  SKU_gt: String
  SKU_gte: String
  SKU_contains: String
  SKU_not_contains: String
  SKU_starts_with: String
  SKU_not_starts_with: String
  SKU_ends_with: String
  SKU_not_ends_with: String
  displayPrice: Float
  displayPrice_not: Float
  displayPrice_in: [Float!]
  displayPrice_not_in: [Float!]
  displayPrice_lt: Float
  displayPrice_lte: Float
  displayPrice_gt: Float
  displayPrice_gte: Float
  available: Boolean
  available_not: Boolean
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  AND: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
  deletedAt: DateTime
  shop: ShopUpdateOneRequiredWithoutProductsInput
  name: String
  description: String
  brand: BrandUpdateOneRequiredInput
  SKU: String
  category: CategoryUpdateOneRequiredInput
  options: OptionUpdateManyInput
  unavailableOptionsValues: OptionValueUpdateManyInput
  variants: VariantUpdateManyWithoutProductInput
  attributes: AttributeUpdateManyWithoutProductsInput
  displayPrice: Float
  available: Boolean
  imageUrl: String
  orderables: OrderableProductUpdateManyWithoutProductInput
}

input ProductUpdateManyDataInput {
  deletedAt: DateTime
  name: String
  description: String
  SKU: String
  displayPrice: Float
  available: Boolean
  imageUrl: String
}

input ProductUpdateManyMutationInput {
  deletedAt: DateTime
  name: String
  description: String
  SKU: String
  displayPrice: Float
  available: Boolean
  imageUrl: String
}

input ProductUpdateManyWithoutAttributesInput {
  create: [ProductCreateWithoutAttributesInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutAttributesInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutAttributesInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithoutShopInput {
  create: [ProductCreateWithoutShopInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutShopInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutShopInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneRequiredWithoutOrderablesInput {
  create: ProductCreateWithoutOrderablesInput
  update: ProductUpdateWithoutOrderablesDataInput
  upsert: ProductUpsertWithoutOrderablesInput
  connect: ProductWhereUniqueInput
}

input ProductUpdateOneWithoutVariantsInput {
  create: ProductCreateWithoutVariantsInput
  update: ProductUpdateWithoutVariantsDataInput
  upsert: ProductUpsertWithoutVariantsInput
  delete: Boolean
  disconnect: Boolean
  connect: ProductWhereUniqueInput
}

input ProductUpdateWithoutAttributesDataInput {
  deletedAt: DateTime
  shop: ShopUpdateOneRequiredWithoutProductsInput
  name: String
  description: String
  brand: BrandUpdateOneRequiredInput
  SKU: String
  category: CategoryUpdateOneRequiredInput
  options: OptionUpdateManyInput
  unavailableOptionsValues: OptionValueUpdateManyInput
  variants: VariantUpdateManyWithoutProductInput
  displayPrice: Float
  available: Boolean
  imageUrl: String
  orderables: OrderableProductUpdateManyWithoutProductInput
}

input ProductUpdateWithoutOrderablesDataInput {
  deletedAt: DateTime
  shop: ShopUpdateOneRequiredWithoutProductsInput
  name: String
  description: String
  brand: BrandUpdateOneRequiredInput
  SKU: String
  category: CategoryUpdateOneRequiredInput
  options: OptionUpdateManyInput
  unavailableOptionsValues: OptionValueUpdateManyInput
  variants: VariantUpdateManyWithoutProductInput
  attributes: AttributeUpdateManyWithoutProductsInput
  displayPrice: Float
  available: Boolean
  imageUrl: String
}

input ProductUpdateWithoutShopDataInput {
  deletedAt: DateTime
  name: String
  description: String
  brand: BrandUpdateOneRequiredInput
  SKU: String
  category: CategoryUpdateOneRequiredInput
  options: OptionUpdateManyInput
  unavailableOptionsValues: OptionValueUpdateManyInput
  variants: VariantUpdateManyWithoutProductInput
  attributes: AttributeUpdateManyWithoutProductsInput
  displayPrice: Float
  available: Boolean
  imageUrl: String
  orderables: OrderableProductUpdateManyWithoutProductInput
}

input ProductUpdateWithoutVariantsDataInput {
  deletedAt: DateTime
  shop: ShopUpdateOneRequiredWithoutProductsInput
  name: String
  description: String
  brand: BrandUpdateOneRequiredInput
  SKU: String
  category: CategoryUpdateOneRequiredInput
  options: OptionUpdateManyInput
  unavailableOptionsValues: OptionValueUpdateManyInput
  attributes: AttributeUpdateManyWithoutProductsInput
  displayPrice: Float
  available: Boolean
  imageUrl: String
  orderables: OrderableProductUpdateManyWithoutProductInput
}

input ProductUpdateWithWhereUniqueWithoutAttributesInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutAttributesDataInput!
}

input ProductUpdateWithWhereUniqueWithoutShopInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutShopDataInput!
}

input ProductUpsertWithoutOrderablesInput {
  update: ProductUpdateWithoutOrderablesDataInput!
  create: ProductCreateWithoutOrderablesInput!
}

input ProductUpsertWithoutVariantsInput {
  update: ProductUpdateWithoutVariantsDataInput!
  create: ProductCreateWithoutVariantsInput!
}

input ProductUpsertWithWhereUniqueWithoutAttributesInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutAttributesDataInput!
  create: ProductCreateWithoutAttributesInput!
}

input ProductUpsertWithWhereUniqueWithoutShopInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutShopDataInput!
  create: ProductCreateWithoutShopInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  shop: ShopWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  brand: BrandWhereInput
  SKU: String
  SKU_not: String
  SKU_in: [String!]
  SKU_not_in: [String!]
  SKU_lt: String
  SKU_lte: String
  SKU_gt: String
  SKU_gte: String
  SKU_contains: String
  SKU_not_contains: String
  SKU_starts_with: String
  SKU_not_starts_with: String
  SKU_ends_with: String
  SKU_not_ends_with: String
  category: CategoryWhereInput
  options_every: OptionWhereInput
  options_some: OptionWhereInput
  options_none: OptionWhereInput
  unavailableOptionsValues_every: OptionValueWhereInput
  unavailableOptionsValues_some: OptionValueWhereInput
  unavailableOptionsValues_none: OptionValueWhereInput
  variants_every: VariantWhereInput
  variants_some: VariantWhereInput
  variants_none: VariantWhereInput
  attributes_every: AttributeWhereInput
  attributes_some: AttributeWhereInput
  attributes_none: AttributeWhereInput
  displayPrice: Float
  displayPrice_not: Float
  displayPrice_in: [Float!]
  displayPrice_not_in: [Float!]
  displayPrice_lt: Float
  displayPrice_lte: Float
  displayPrice_gt: Float
  displayPrice_gte: Float
  available: Boolean
  available_not: Boolean
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  orderables_every: OrderableProductWhereInput
  orderables_some: OrderableProductWhereInput
  orderables_none: OrderableProductWhereInput
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  attribute(where: AttributeWhereUniqueInput!): Attribute
  attributes(where: AttributeWhereInput, orderBy: AttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attribute]!
  attributesConnection(where: AttributeWhereInput, orderBy: AttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AttributeConnection!
  blockList(where: BlockListWhereUniqueInput!): BlockList
  blockLists(where: BlockListWhereInput, orderBy: BlockListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BlockList]!
  blockListsConnection(where: BlockListWhereInput, orderBy: BlockListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlockListConnection!
  brand(where: BrandWhereUniqueInput!): Brand
  brands(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Brand]!
  brandsConnection(where: BrandWhereInput, orderBy: BrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BrandConnection!
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  conversation(where: ConversationWhereUniqueInput!): Conversation
  conversations(where: ConversationWhereInput, orderBy: ConversationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Conversation]!
  conversationsConnection(where: ConversationWhereInput, orderBy: ConversationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConversationConnection!
  conversationParticipant(where: ConversationParticipantWhereUniqueInput!): ConversationParticipant
  conversationParticipants(where: ConversationParticipantWhereInput, orderBy: ConversationParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConversationParticipant]!
  conversationParticipantsConnection(where: ConversationParticipantWhereInput, orderBy: ConversationParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConversationParticipantConnection!
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  option(where: OptionWhereUniqueInput!): Option
  options(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Option]!
  optionsConnection(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OptionConnection!
  optionValue(where: OptionValueWhereUniqueInput!): OptionValue
  optionValues(where: OptionValueWhereInput, orderBy: OptionValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OptionValue]!
  optionValuesConnection(where: OptionValueWhereInput, orderBy: OptionValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OptionValueConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  orderLineItem(where: OrderLineItemWhereUniqueInput!): OrderLineItem
  orderLineItems(where: OrderLineItemWhereInput, orderBy: OrderLineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderLineItem]!
  orderLineItemsConnection(where: OrderLineItemWhereInput, orderBy: OrderLineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderLineItemConnection!
  orderableProduct(where: OrderableProductWhereUniqueInput!): OrderableProduct
  orderableProducts(where: OrderableProductWhereInput, orderBy: OrderableProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderableProduct]!
  orderableProductsConnection(where: OrderableProductWhereInput, orderBy: OrderableProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderableProductConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  selectedOption(where: SelectedOptionWhereUniqueInput!): SelectedOption
  selectedOptions(where: SelectedOptionWhereInput, orderBy: SelectedOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SelectedOption]!
  selectedOptionsConnection(where: SelectedOptionWhereInput, orderBy: SelectedOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SelectedOptionConnection!
  shop(where: ShopWhereUniqueInput!): Shop
  shops(where: ShopWhereInput, orderBy: ShopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shop]!
  shopsConnection(where: ShopWhereInput, orderBy: ShopOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShopConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  variant(where: VariantWhereUniqueInput!): Variant
  variants(where: VariantWhereInput, orderBy: VariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Variant]!
  variantsConnection(where: VariantWhereInput, orderBy: VariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VariantConnection!
  node(id: ID!): Node
}

type SelectedOption {
  id: ID!
  deletedAt: DateTime
  option: Option!
  variant: Variant!
  value: OptionValue!
}

type SelectedOptionConnection {
  pageInfo: PageInfo!
  edges: [SelectedOptionEdge]!
  aggregate: AggregateSelectedOption!
}

input SelectedOptionCreateInput {
  id: ID
  deletedAt: DateTime
  option: OptionCreateOneInput!
  variant: VariantCreateOneWithoutSelectedOptionsInput!
  value: OptionValueCreateOneInput!
}

input SelectedOptionCreateManyWithoutVariantInput {
  create: [SelectedOptionCreateWithoutVariantInput!]
  connect: [SelectedOptionWhereUniqueInput!]
}

input SelectedOptionCreateWithoutVariantInput {
  id: ID
  deletedAt: DateTime
  option: OptionCreateOneInput!
  value: OptionValueCreateOneInput!
}

type SelectedOptionEdge {
  node: SelectedOption!
  cursor: String!
}

enum SelectedOptionOrderByInput {
  id_ASC
  id_DESC
  deletedAt_ASC
  deletedAt_DESC
}

type SelectedOptionPreviousValues {
  id: ID!
  deletedAt: DateTime
}

input SelectedOptionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [SelectedOptionScalarWhereInput!]
  OR: [SelectedOptionScalarWhereInput!]
  NOT: [SelectedOptionScalarWhereInput!]
}

type SelectedOptionSubscriptionPayload {
  mutation: MutationType!
  node: SelectedOption
  updatedFields: [String!]
  previousValues: SelectedOptionPreviousValues
}

input SelectedOptionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SelectedOptionWhereInput
  AND: [SelectedOptionSubscriptionWhereInput!]
  OR: [SelectedOptionSubscriptionWhereInput!]
  NOT: [SelectedOptionSubscriptionWhereInput!]
}

input SelectedOptionUpdateInput {
  deletedAt: DateTime
  option: OptionUpdateOneRequiredInput
  variant: VariantUpdateOneRequiredWithoutSelectedOptionsInput
  value: OptionValueUpdateOneRequiredInput
}

input SelectedOptionUpdateManyDataInput {
  deletedAt: DateTime
}

input SelectedOptionUpdateManyMutationInput {
  deletedAt: DateTime
}

input SelectedOptionUpdateManyWithoutVariantInput {
  create: [SelectedOptionCreateWithoutVariantInput!]
  delete: [SelectedOptionWhereUniqueInput!]
  connect: [SelectedOptionWhereUniqueInput!]
  set: [SelectedOptionWhereUniqueInput!]
  disconnect: [SelectedOptionWhereUniqueInput!]
  update: [SelectedOptionUpdateWithWhereUniqueWithoutVariantInput!]
  upsert: [SelectedOptionUpsertWithWhereUniqueWithoutVariantInput!]
  deleteMany: [SelectedOptionScalarWhereInput!]
  updateMany: [SelectedOptionUpdateManyWithWhereNestedInput!]
}

input SelectedOptionUpdateManyWithWhereNestedInput {
  where: SelectedOptionScalarWhereInput!
  data: SelectedOptionUpdateManyDataInput!
}

input SelectedOptionUpdateWithoutVariantDataInput {
  deletedAt: DateTime
  option: OptionUpdateOneRequiredInput
  value: OptionValueUpdateOneRequiredInput
}

input SelectedOptionUpdateWithWhereUniqueWithoutVariantInput {
  where: SelectedOptionWhereUniqueInput!
  data: SelectedOptionUpdateWithoutVariantDataInput!
}

input SelectedOptionUpsertWithWhereUniqueWithoutVariantInput {
  where: SelectedOptionWhereUniqueInput!
  update: SelectedOptionUpdateWithoutVariantDataInput!
  create: SelectedOptionCreateWithoutVariantInput!
}

input SelectedOptionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  option: OptionWhereInput
  variant: VariantWhereInput
  value: OptionValueWhereInput
  AND: [SelectedOptionWhereInput!]
  OR: [SelectedOptionWhereInput!]
  NOT: [SelectedOptionWhereInput!]
}

input SelectedOptionWhereUniqueInput {
  id: ID
}

type Shop {
  id: ID!
  name: String!
  address: String!
  zipCode: String!
  city: String!
  phoneNumber: String!
  openingHours: String!
  MOTD: String
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
  newProducts(where: OrderableProductWhereInput, orderBy: OrderableProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderableProduct!]
  bestSellerProducts(where: OrderableProductWhereInput, orderBy: OrderableProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderableProduct!]
}

type ShopConnection {
  pageInfo: PageInfo!
  edges: [ShopEdge]!
  aggregate: AggregateShop!
}

input ShopCreateInput {
  id: ID
  name: String!
  address: String!
  zipCode: String!
  city: String!
  phoneNumber: String!
  openingHours: String!
  MOTD: String
  products: ProductCreateManyWithoutShopInput
  newProducts: OrderableProductCreateManyWithoutShopNewProductInput
  bestSellerProducts: OrderableProductCreateManyWithoutShopBestSellerInput
}

input ShopCreateOneInput {
  create: ShopCreateInput
  connect: ShopWhereUniqueInput
}

input ShopCreateOneWithoutBestSellerProductsInput {
  create: ShopCreateWithoutBestSellerProductsInput
  connect: ShopWhereUniqueInput
}

input ShopCreateOneWithoutNewProductsInput {
  create: ShopCreateWithoutNewProductsInput
  connect: ShopWhereUniqueInput
}

input ShopCreateOneWithoutProductsInput {
  create: ShopCreateWithoutProductsInput
  connect: ShopWhereUniqueInput
}

input ShopCreateWithoutBestSellerProductsInput {
  id: ID
  name: String!
  address: String!
  zipCode: String!
  city: String!
  phoneNumber: String!
  openingHours: String!
  MOTD: String
  products: ProductCreateManyWithoutShopInput
  newProducts: OrderableProductCreateManyWithoutShopNewProductInput
}

input ShopCreateWithoutNewProductsInput {
  id: ID
  name: String!
  address: String!
  zipCode: String!
  city: String!
  phoneNumber: String!
  openingHours: String!
  MOTD: String
  products: ProductCreateManyWithoutShopInput
  bestSellerProducts: OrderableProductCreateManyWithoutShopBestSellerInput
}

input ShopCreateWithoutProductsInput {
  id: ID
  name: String!
  address: String!
  zipCode: String!
  city: String!
  phoneNumber: String!
  openingHours: String!
  MOTD: String
  newProducts: OrderableProductCreateManyWithoutShopNewProductInput
  bestSellerProducts: OrderableProductCreateManyWithoutShopBestSellerInput
}

type ShopEdge {
  node: Shop!
  cursor: String!
}

enum ShopOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  zipCode_ASC
  zipCode_DESC
  city_ASC
  city_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  openingHours_ASC
  openingHours_DESC
  MOTD_ASC
  MOTD_DESC
}

type ShopPreviousValues {
  id: ID!
  name: String!
  address: String!
  zipCode: String!
  city: String!
  phoneNumber: String!
  openingHours: String!
  MOTD: String
}

type ShopSubscriptionPayload {
  mutation: MutationType!
  node: Shop
  updatedFields: [String!]
  previousValues: ShopPreviousValues
}

input ShopSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShopWhereInput
  AND: [ShopSubscriptionWhereInput!]
  OR: [ShopSubscriptionWhereInput!]
  NOT: [ShopSubscriptionWhereInput!]
}

input ShopUpdateDataInput {
  name: String
  address: String
  zipCode: String
  city: String
  phoneNumber: String
  openingHours: String
  MOTD: String
  products: ProductUpdateManyWithoutShopInput
  newProducts: OrderableProductUpdateManyWithoutShopNewProductInput
  bestSellerProducts: OrderableProductUpdateManyWithoutShopBestSellerInput
}

input ShopUpdateInput {
  name: String
  address: String
  zipCode: String
  city: String
  phoneNumber: String
  openingHours: String
  MOTD: String
  products: ProductUpdateManyWithoutShopInput
  newProducts: OrderableProductUpdateManyWithoutShopNewProductInput
  bestSellerProducts: OrderableProductUpdateManyWithoutShopBestSellerInput
}

input ShopUpdateManyMutationInput {
  name: String
  address: String
  zipCode: String
  city: String
  phoneNumber: String
  openingHours: String
  MOTD: String
}

input ShopUpdateOneInput {
  create: ShopCreateInput
  update: ShopUpdateDataInput
  upsert: ShopUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ShopWhereUniqueInput
}

input ShopUpdateOneRequiredInput {
  create: ShopCreateInput
  update: ShopUpdateDataInput
  upsert: ShopUpsertNestedInput
  connect: ShopWhereUniqueInput
}

input ShopUpdateOneRequiredWithoutProductsInput {
  create: ShopCreateWithoutProductsInput
  update: ShopUpdateWithoutProductsDataInput
  upsert: ShopUpsertWithoutProductsInput
  connect: ShopWhereUniqueInput
}

input ShopUpdateOneWithoutBestSellerProductsInput {
  create: ShopCreateWithoutBestSellerProductsInput
  update: ShopUpdateWithoutBestSellerProductsDataInput
  upsert: ShopUpsertWithoutBestSellerProductsInput
  delete: Boolean
  disconnect: Boolean
  connect: ShopWhereUniqueInput
}

input ShopUpdateOneWithoutNewProductsInput {
  create: ShopCreateWithoutNewProductsInput
  update: ShopUpdateWithoutNewProductsDataInput
  upsert: ShopUpsertWithoutNewProductsInput
  delete: Boolean
  disconnect: Boolean
  connect: ShopWhereUniqueInput
}

input ShopUpdateWithoutBestSellerProductsDataInput {
  name: String
  address: String
  zipCode: String
  city: String
  phoneNumber: String
  openingHours: String
  MOTD: String
  products: ProductUpdateManyWithoutShopInput
  newProducts: OrderableProductUpdateManyWithoutShopNewProductInput
}

input ShopUpdateWithoutNewProductsDataInput {
  name: String
  address: String
  zipCode: String
  city: String
  phoneNumber: String
  openingHours: String
  MOTD: String
  products: ProductUpdateManyWithoutShopInput
  bestSellerProducts: OrderableProductUpdateManyWithoutShopBestSellerInput
}

input ShopUpdateWithoutProductsDataInput {
  name: String
  address: String
  zipCode: String
  city: String
  phoneNumber: String
  openingHours: String
  MOTD: String
  newProducts: OrderableProductUpdateManyWithoutShopNewProductInput
  bestSellerProducts: OrderableProductUpdateManyWithoutShopBestSellerInput
}

input ShopUpsertNestedInput {
  update: ShopUpdateDataInput!
  create: ShopCreateInput!
}

input ShopUpsertWithoutBestSellerProductsInput {
  update: ShopUpdateWithoutBestSellerProductsDataInput!
  create: ShopCreateWithoutBestSellerProductsInput!
}

input ShopUpsertWithoutNewProductsInput {
  update: ShopUpdateWithoutNewProductsDataInput!
  create: ShopCreateWithoutNewProductsInput!
}

input ShopUpsertWithoutProductsInput {
  update: ShopUpdateWithoutProductsDataInput!
  create: ShopCreateWithoutProductsInput!
}

input ShopWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  zipCode: String
  zipCode_not: String
  zipCode_in: [String!]
  zipCode_not_in: [String!]
  zipCode_lt: String
  zipCode_lte: String
  zipCode_gt: String
  zipCode_gte: String
  zipCode_contains: String
  zipCode_not_contains: String
  zipCode_starts_with: String
  zipCode_not_starts_with: String
  zipCode_ends_with: String
  zipCode_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  openingHours: String
  openingHours_not: String
  openingHours_in: [String!]
  openingHours_not_in: [String!]
  openingHours_lt: String
  openingHours_lte: String
  openingHours_gt: String
  openingHours_gte: String
  openingHours_contains: String
  openingHours_not_contains: String
  openingHours_starts_with: String
  openingHours_not_starts_with: String
  openingHours_ends_with: String
  openingHours_not_ends_with: String
  MOTD: String
  MOTD_not: String
  MOTD_in: [String!]
  MOTD_not_in: [String!]
  MOTD_lt: String
  MOTD_lte: String
  MOTD_gt: String
  MOTD_gte: String
  MOTD_contains: String
  MOTD_not_contains: String
  MOTD_starts_with: String
  MOTD_not_starts_with: String
  MOTD_ends_with: String
  MOTD_not_ends_with: String
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  newProducts_every: OrderableProductWhereInput
  newProducts_some: OrderableProductWhereInput
  newProducts_none: OrderableProductWhereInput
  bestSellerProducts_every: OrderableProductWhereInput
  bestSellerProducts_some: OrderableProductWhereInput
  bestSellerProducts_none: OrderableProductWhereInput
  AND: [ShopWhereInput!]
  OR: [ShopWhereInput!]
  NOT: [ShopWhereInput!]
}

input ShopWhereUniqueInput {
  id: ID
}

type Subscription {
  attribute(where: AttributeSubscriptionWhereInput): AttributeSubscriptionPayload
  blockList(where: BlockListSubscriptionWhereInput): BlockListSubscriptionPayload
  brand(where: BrandSubscriptionWhereInput): BrandSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  conversation(where: ConversationSubscriptionWhereInput): ConversationSubscriptionPayload
  conversationParticipant(where: ConversationParticipantSubscriptionWhereInput): ConversationParticipantSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  option(where: OptionSubscriptionWhereInput): OptionSubscriptionPayload
  optionValue(where: OptionValueSubscriptionWhereInput): OptionValueSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  orderLineItem(where: OrderLineItemSubscriptionWhereInput): OrderLineItemSubscriptionPayload
  orderableProduct(where: OrderableProductSubscriptionWhereInput): OrderableProductSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  selectedOption(where: SelectedOptionSubscriptionWhereInput): SelectedOptionSubscriptionPayload
  shop(where: ShopSubscriptionWhereInput): ShopSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  variant(where: VariantSubscriptionWhereInput): VariantSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  selectedShop: Shop
  email: String!
  firstName: String
  emailVerified: Boolean
  lastName: String
  phone: String
  roles: [UserRole!]!
  avatar: String
  last_login_date: DateTime
  conversations(where: ConversationParticipantWhereInput, orderBy: ConversationParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConversationParticipant!]
  contacts(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  cart(where: OrderLineItemWhereInput, orderBy: OrderLineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderLineItem!]
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  stripeCustomerId: String
  oneSignalUserId: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  selectedShop: ShopCreateOneInput
  email: String!
  firstName: String
  emailVerified: Boolean
  lastName: String
  phone: String
  roles: UserCreaterolesInput
  avatar: String
  last_login_date: DateTime
  conversations: ConversationParticipantCreateManyWithoutUserInput
  contacts: UserCreateManyInput
  cart: OrderLineItemCreateManyWithoutOwnerInput
  orders: OrderCreateManyWithoutOwnerInput
  stripeCustomerId: String
  oneSignalUserId: String
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCartInput {
  create: UserCreateWithoutCartInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutConversationsInput {
  create: UserCreateWithoutConversationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  connect: UserWhereUniqueInput
}

input UserCreaterolesInput {
  set: [UserRole!]
}

input UserCreateWithoutCartInput {
  id: ID
  selectedShop: ShopCreateOneInput
  email: String!
  firstName: String
  emailVerified: Boolean
  lastName: String
  phone: String
  roles: UserCreaterolesInput
  avatar: String
  last_login_date: DateTime
  conversations: ConversationParticipantCreateManyWithoutUserInput
  contacts: UserCreateManyInput
  orders: OrderCreateManyWithoutOwnerInput
  stripeCustomerId: String
  oneSignalUserId: String
}

input UserCreateWithoutConversationsInput {
  id: ID
  selectedShop: ShopCreateOneInput
  email: String!
  firstName: String
  emailVerified: Boolean
  lastName: String
  phone: String
  roles: UserCreaterolesInput
  avatar: String
  last_login_date: DateTime
  contacts: UserCreateManyInput
  cart: OrderLineItemCreateManyWithoutOwnerInput
  orders: OrderCreateManyWithoutOwnerInput
  stripeCustomerId: String
  oneSignalUserId: String
}

input UserCreateWithoutOrdersInput {
  id: ID
  selectedShop: ShopCreateOneInput
  email: String!
  firstName: String
  emailVerified: Boolean
  lastName: String
  phone: String
  roles: UserCreaterolesInput
  avatar: String
  last_login_date: DateTime
  conversations: ConversationParticipantCreateManyWithoutUserInput
  contacts: UserCreateManyInput
  cart: OrderLineItemCreateManyWithoutOwnerInput
  stripeCustomerId: String
  oneSignalUserId: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  emailVerified_ASC
  emailVerified_DESC
  lastName_ASC
  lastName_DESC
  phone_ASC
  phone_DESC
  avatar_ASC
  avatar_DESC
  last_login_date_ASC
  last_login_date_DESC
  stripeCustomerId_ASC
  stripeCustomerId_DESC
  oneSignalUserId_ASC
  oneSignalUserId_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  firstName: String
  emailVerified: Boolean
  lastName: String
  phone: String
  roles: [UserRole!]!
  avatar: String
  last_login_date: DateTime
  stripeCustomerId: String
  oneSignalUserId: String
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  emailVerified: Boolean
  emailVerified_not: Boolean
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  last_login_date: DateTime
  last_login_date_not: DateTime
  last_login_date_in: [DateTime!]
  last_login_date_not_in: [DateTime!]
  last_login_date_lt: DateTime
  last_login_date_lte: DateTime
  last_login_date_gt: DateTime
  last_login_date_gte: DateTime
  stripeCustomerId: String
  stripeCustomerId_not: String
  stripeCustomerId_in: [String!]
  stripeCustomerId_not_in: [String!]
  stripeCustomerId_lt: String
  stripeCustomerId_lte: String
  stripeCustomerId_gt: String
  stripeCustomerId_gte: String
  stripeCustomerId_contains: String
  stripeCustomerId_not_contains: String
  stripeCustomerId_starts_with: String
  stripeCustomerId_not_starts_with: String
  stripeCustomerId_ends_with: String
  stripeCustomerId_not_ends_with: String
  oneSignalUserId: String
  oneSignalUserId_not: String
  oneSignalUserId_in: [String!]
  oneSignalUserId_not_in: [String!]
  oneSignalUserId_lt: String
  oneSignalUserId_lte: String
  oneSignalUserId_gt: String
  oneSignalUserId_gte: String
  oneSignalUserId_contains: String
  oneSignalUserId_not_contains: String
  oneSignalUserId_starts_with: String
  oneSignalUserId_not_starts_with: String
  oneSignalUserId_ends_with: String
  oneSignalUserId_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  selectedShop: ShopUpdateOneInput
  email: String
  firstName: String
  emailVerified: Boolean
  lastName: String
  phone: String
  roles: UserUpdaterolesInput
  avatar: String
  last_login_date: DateTime
  conversations: ConversationParticipantUpdateManyWithoutUserInput
  contacts: UserUpdateManyInput
  cart: OrderLineItemUpdateManyWithoutOwnerInput
  orders: OrderUpdateManyWithoutOwnerInput
  stripeCustomerId: String
  oneSignalUserId: String
}

input UserUpdateInput {
  selectedShop: ShopUpdateOneInput
  email: String
  firstName: String
  emailVerified: Boolean
  lastName: String
  phone: String
  roles: UserUpdaterolesInput
  avatar: String
  last_login_date: DateTime
  conversations: ConversationParticipantUpdateManyWithoutUserInput
  contacts: UserUpdateManyInput
  cart: OrderLineItemUpdateManyWithoutOwnerInput
  orders: OrderUpdateManyWithoutOwnerInput
  stripeCustomerId: String
  oneSignalUserId: String
}

input UserUpdateManyDataInput {
  email: String
  firstName: String
  emailVerified: Boolean
  lastName: String
  phone: String
  roles: UserUpdaterolesInput
  avatar: String
  last_login_date: DateTime
  stripeCustomerId: String
  oneSignalUserId: String
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  email: String
  firstName: String
  emailVerified: Boolean
  lastName: String
  phone: String
  roles: UserUpdaterolesInput
  avatar: String
  last_login_date: DateTime
  stripeCustomerId: String
  oneSignalUserId: String
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutConversationsInput {
  create: UserCreateWithoutConversationsInput
  update: UserUpdateWithoutConversationsDataInput
  upsert: UserUpsertWithoutConversationsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  update: UserUpdateWithoutOrdersDataInput
  upsert: UserUpsertWithoutOrdersInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutCartInput {
  create: UserCreateWithoutCartInput
  update: UserUpdateWithoutCartDataInput
  upsert: UserUpsertWithoutCartInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdaterolesInput {
  set: [UserRole!]
}

input UserUpdateWithoutCartDataInput {
  selectedShop: ShopUpdateOneInput
  email: String
  firstName: String
  emailVerified: Boolean
  lastName: String
  phone: String
  roles: UserUpdaterolesInput
  avatar: String
  last_login_date: DateTime
  conversations: ConversationParticipantUpdateManyWithoutUserInput
  contacts: UserUpdateManyInput
  orders: OrderUpdateManyWithoutOwnerInput
  stripeCustomerId: String
  oneSignalUserId: String
}

input UserUpdateWithoutConversationsDataInput {
  selectedShop: ShopUpdateOneInput
  email: String
  firstName: String
  emailVerified: Boolean
  lastName: String
  phone: String
  roles: UserUpdaterolesInput
  avatar: String
  last_login_date: DateTime
  contacts: UserUpdateManyInput
  cart: OrderLineItemUpdateManyWithoutOwnerInput
  orders: OrderUpdateManyWithoutOwnerInput
  stripeCustomerId: String
  oneSignalUserId: String
}

input UserUpdateWithoutOrdersDataInput {
  selectedShop: ShopUpdateOneInput
  email: String
  firstName: String
  emailVerified: Boolean
  lastName: String
  phone: String
  roles: UserUpdaterolesInput
  avatar: String
  last_login_date: DateTime
  conversations: ConversationParticipantUpdateManyWithoutUserInput
  contacts: UserUpdateManyInput
  cart: OrderLineItemUpdateManyWithoutOwnerInput
  stripeCustomerId: String
  oneSignalUserId: String
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCartInput {
  update: UserUpdateWithoutCartDataInput!
  create: UserCreateWithoutCartInput!
}

input UserUpsertWithoutConversationsInput {
  update: UserUpdateWithoutConversationsDataInput!
  create: UserCreateWithoutConversationsInput!
}

input UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersDataInput!
  create: UserCreateWithoutOrdersInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  selectedShop: ShopWhereInput
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  emailVerified: Boolean
  emailVerified_not: Boolean
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  last_login_date: DateTime
  last_login_date_not: DateTime
  last_login_date_in: [DateTime!]
  last_login_date_not_in: [DateTime!]
  last_login_date_lt: DateTime
  last_login_date_lte: DateTime
  last_login_date_gt: DateTime
  last_login_date_gte: DateTime
  conversations_every: ConversationParticipantWhereInput
  conversations_some: ConversationParticipantWhereInput
  conversations_none: ConversationParticipantWhereInput
  contacts_every: UserWhereInput
  contacts_some: UserWhereInput
  contacts_none: UserWhereInput
  cart_every: OrderLineItemWhereInput
  cart_some: OrderLineItemWhereInput
  cart_none: OrderLineItemWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  stripeCustomerId: String
  stripeCustomerId_not: String
  stripeCustomerId_in: [String!]
  stripeCustomerId_not_in: [String!]
  stripeCustomerId_lt: String
  stripeCustomerId_lte: String
  stripeCustomerId_gt: String
  stripeCustomerId_gte: String
  stripeCustomerId_contains: String
  stripeCustomerId_not_contains: String
  stripeCustomerId_starts_with: String
  stripeCustomerId_not_starts_with: String
  stripeCustomerId_ends_with: String
  stripeCustomerId_not_ends_with: String
  oneSignalUserId: String
  oneSignalUserId_not: String
  oneSignalUserId_in: [String!]
  oneSignalUserId_not_in: [String!]
  oneSignalUserId_lt: String
  oneSignalUserId_lte: String
  oneSignalUserId_gt: String
  oneSignalUserId_gte: String
  oneSignalUserId_contains: String
  oneSignalUserId_not_contains: String
  oneSignalUserId_starts_with: String
  oneSignalUserId_not_starts_with: String
  oneSignalUserId_ends_with: String
  oneSignalUserId_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Variant {
  id: ID!
  deletedAt: DateTime
  selectedOptions(where: SelectedOptionWhereInput, orderBy: SelectedOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SelectedOption!]
  price: Float!
  available: Boolean!
  product: Product
}

type VariantConnection {
  pageInfo: PageInfo!
  edges: [VariantEdge]!
  aggregate: AggregateVariant!
}

input VariantCreateInput {
  id: ID
  deletedAt: DateTime
  selectedOptions: SelectedOptionCreateManyWithoutVariantInput
  price: Float!
  available: Boolean!
  product: ProductCreateOneWithoutVariantsInput
}

input VariantCreateManyWithoutProductInput {
  create: [VariantCreateWithoutProductInput!]
  connect: [VariantWhereUniqueInput!]
}

input VariantCreateOneInput {
  create: VariantCreateInput
  connect: VariantWhereUniqueInput
}

input VariantCreateOneWithoutSelectedOptionsInput {
  create: VariantCreateWithoutSelectedOptionsInput
  connect: VariantWhereUniqueInput
}

input VariantCreateWithoutProductInput {
  id: ID
  deletedAt: DateTime
  selectedOptions: SelectedOptionCreateManyWithoutVariantInput
  price: Float!
  available: Boolean!
}

input VariantCreateWithoutSelectedOptionsInput {
  id: ID
  deletedAt: DateTime
  price: Float!
  available: Boolean!
  product: ProductCreateOneWithoutVariantsInput
}

type VariantEdge {
  node: Variant!
  cursor: String!
}

enum VariantOrderByInput {
  id_ASC
  id_DESC
  deletedAt_ASC
  deletedAt_DESC
  price_ASC
  price_DESC
  available_ASC
  available_DESC
}

type VariantPreviousValues {
  id: ID!
  deletedAt: DateTime
  price: Float!
  available: Boolean!
}

input VariantScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  available: Boolean
  available_not: Boolean
  AND: [VariantScalarWhereInput!]
  OR: [VariantScalarWhereInput!]
  NOT: [VariantScalarWhereInput!]
}

type VariantSubscriptionPayload {
  mutation: MutationType!
  node: Variant
  updatedFields: [String!]
  previousValues: VariantPreviousValues
}

input VariantSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VariantWhereInput
  AND: [VariantSubscriptionWhereInput!]
  OR: [VariantSubscriptionWhereInput!]
  NOT: [VariantSubscriptionWhereInput!]
}

input VariantUpdateDataInput {
  deletedAt: DateTime
  selectedOptions: SelectedOptionUpdateManyWithoutVariantInput
  price: Float
  available: Boolean
  product: ProductUpdateOneWithoutVariantsInput
}

input VariantUpdateInput {
  deletedAt: DateTime
  selectedOptions: SelectedOptionUpdateManyWithoutVariantInput
  price: Float
  available: Boolean
  product: ProductUpdateOneWithoutVariantsInput
}

input VariantUpdateManyDataInput {
  deletedAt: DateTime
  price: Float
  available: Boolean
}

input VariantUpdateManyMutationInput {
  deletedAt: DateTime
  price: Float
  available: Boolean
}

input VariantUpdateManyWithoutProductInput {
  create: [VariantCreateWithoutProductInput!]
  delete: [VariantWhereUniqueInput!]
  connect: [VariantWhereUniqueInput!]
  set: [VariantWhereUniqueInput!]
  disconnect: [VariantWhereUniqueInput!]
  update: [VariantUpdateWithWhereUniqueWithoutProductInput!]
  upsert: [VariantUpsertWithWhereUniqueWithoutProductInput!]
  deleteMany: [VariantScalarWhereInput!]
  updateMany: [VariantUpdateManyWithWhereNestedInput!]
}

input VariantUpdateManyWithWhereNestedInput {
  where: VariantScalarWhereInput!
  data: VariantUpdateManyDataInput!
}

input VariantUpdateOneInput {
  create: VariantCreateInput
  update: VariantUpdateDataInput
  upsert: VariantUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: VariantWhereUniqueInput
}

input VariantUpdateOneRequiredWithoutSelectedOptionsInput {
  create: VariantCreateWithoutSelectedOptionsInput
  update: VariantUpdateWithoutSelectedOptionsDataInput
  upsert: VariantUpsertWithoutSelectedOptionsInput
  connect: VariantWhereUniqueInput
}

input VariantUpdateWithoutProductDataInput {
  deletedAt: DateTime
  selectedOptions: SelectedOptionUpdateManyWithoutVariantInput
  price: Float
  available: Boolean
}

input VariantUpdateWithoutSelectedOptionsDataInput {
  deletedAt: DateTime
  price: Float
  available: Boolean
  product: ProductUpdateOneWithoutVariantsInput
}

input VariantUpdateWithWhereUniqueWithoutProductInput {
  where: VariantWhereUniqueInput!
  data: VariantUpdateWithoutProductDataInput!
}

input VariantUpsertNestedInput {
  update: VariantUpdateDataInput!
  create: VariantCreateInput!
}

input VariantUpsertWithoutSelectedOptionsInput {
  update: VariantUpdateWithoutSelectedOptionsDataInput!
  create: VariantCreateWithoutSelectedOptionsInput!
}

input VariantUpsertWithWhereUniqueWithoutProductInput {
  where: VariantWhereUniqueInput!
  update: VariantUpdateWithoutProductDataInput!
  create: VariantCreateWithoutProductInput!
}

input VariantWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  selectedOptions_every: SelectedOptionWhereInput
  selectedOptions_some: SelectedOptionWhereInput
  selectedOptions_none: SelectedOptionWhereInput
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  available: Boolean
  available_not: Boolean
  product: ProductWhereInput
  AND: [VariantWhereInput!]
  OR: [VariantWhereInput!]
  NOT: [VariantWhereInput!]
}

input VariantWhereUniqueInput {
  id: ID
}
`
      }
    